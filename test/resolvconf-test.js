/* eslint-env mocha */
/* eslint prefer-arrow-callback: "off" */

'use strict';

const assert = require('bsert');
const ResolvConf = require('../lib/resolvconf');

const rcTxt1 = `
# Testing
nameserver 8.8.8.8
nameserver 8.8.4.4
search example.com
sortlist 130.155.160.0/255.255.240.0 130.155.0.0
`;

const rcTxt2 = `
# Testing with ports
nameserver 8.8.8.8:5300
nameserver 8.8.4.4:5300
search example.com
sortlist 130.155.160.0/255.255.240.0 130.155.0.0
`;

const rcTxt3 = `
# Testing with ports and keys
nameserver 8.8.8.8:5300
nameserver 8.8.4.4:5300
nameserver akqq3xoch6cgluhgqh2n7lm4lh4d2zjuzyiekudx6d37xckhp26dg@127.0.0.1:5300
search example.com
sortlist 130.155.160.0/255.255.240.0 130.155.0.0
`;

const rcTxt4 = `
# Generated by bns
nameserver 208.67.222.222
nameserver 208.67.220.220
nameserver 208.67.222.220
nameserver 208.67.220.222
nameserver 2620:0:ccc::2
nameserver 2620:0:ccd::2
search example.com
sortlist 130.155.160.0/255.255.240.0 130.155.0.0
options ndots:2 timeout:6 attempts:3 rotate inet6 edns0 no-tld-query use-vc
`;

function strip(str) {
  str = str.replace(/^#.*/gm, '');
  str = str.trim();
  return str;
}

describe('ResolvConf', function() {
  it('should handle resolv.conf (1)', () => {
    const rc = ResolvConf.fromString(rcTxt1);

    assert(rc.ns4.length === 2);
    assert(rc.ns4[0].host === '8.8.8.8');
    assert(rc.ns4[0].port === 53);
    assert(rc.ns4[1].host === '8.8.4.4');
    assert(rc.ns4[1].port === 53);

    assert.deepStrictEqual(rc.search, ['example.com.']);

    assert.deepStrictEqual(rc.sortlist, [
      { ip: '130.155.160.0', mask: '255.255.240.0' },
      { ip: '130.155.0.0', mask: null }
    ]);

    assert.deepStrictEqual(rc.getServers(), [
      '8.8.8.8:53',
      '8.8.4.4:53'
    ]);

    assert.strictEqual(strip(rc.toString()), strip(rcTxt1));
  });

  it('should handle resolv.conf (2)', () => {
    const rc = ResolvConf.fromString(rcTxt2);

    assert(rc.ns4.length === 2);
    assert(rc.ns4[0].host === '8.8.8.8');
    assert(rc.ns4[0].port === 5300);
    assert(rc.ns4[1].host === '8.8.4.4');
    assert(rc.ns4[1].port === 5300);

    assert.deepStrictEqual(rc.search, ['example.com.']);

    assert.deepStrictEqual(rc.sortlist, [
      { ip: '130.155.160.0', mask: '255.255.240.0' },
      { ip: '130.155.0.0', mask: null }
    ]);

    assert.deepStrictEqual(rc.getServers(), [
      '8.8.8.8:5300',
      '8.8.4.4:5300'
    ]);

    assert.strictEqual(strip(rc.toString(true)), strip(rcTxt2));
  });

  it('should handle resolv.conf (3)', () => {
    const rc = ResolvConf.fromString(rcTxt3);

    assert(rc.ns4.length === 3);
    assert(rc.ns4[0].host === '8.8.8.8');
    assert(rc.ns4[0].port === 5300);
    assert(rc.ns4[1].host === '8.8.4.4');
    assert(rc.ns4[1].port === 5300);
    assert(rc.ns4[2].host === '127.0.0.1');
    assert(rc.ns4[2].port === 5300);

    assert.deepStrictEqual(rc.search, ['example.com.']);

    assert.deepStrictEqual(rc.sortlist, [
      { ip: '130.155.160.0', mask: '255.255.240.0' },
      { ip: '130.155.0.0', mask: null }
    ]);

    assert.deepStrictEqual(rc.getServers(), [
      '8.8.8.8:5300',
      '8.8.4.4:5300',
      '127.0.0.1:5300'
    ]);

    assert(rc.keys.get('127.0.0.1:5300'));

    assert.strictEqual(strip(rc.toString(true)), strip(rcTxt3));
  });

  it('should handle resolv.conf (4)', () => {
    const rc = ResolvConf.fromString(rcTxt4);
    assert(rc.rotate);
    assert.strictEqual(strip(rc.toString()), strip(rcTxt4));
  });
});
